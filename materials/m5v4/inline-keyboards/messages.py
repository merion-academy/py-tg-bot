from telebot import formatting, types

start_text = "<b>–ü—Ä–∏–≤–µ—Ç!</b> –î–∞–≤–∞–π –æ–±—â–∞—Ç—å—Å—è. –ö–∞–∫ –¥–µ–ª–∞?"

help_text = """–ü—Ä–∏–≤–µ—Ç! –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ø–æ–º–æ—â—å (—ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ)
/joke - —Å–ª—É—á–∞–π–Ω–∞—è —à—Ç—É–∫–∞
/joke2 - —à—É—Ç–∫–∞ —Å –∫–∞–ª–∞–º–±—É—Ä–æ–º
/jpy_to_rub 100 - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 100 JPY –≤ RUB
/cvt 100 JPY - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 100 JPY –≤ RUB
/cvt 100 JPY IDR - –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å 100 JPY –≤ IDR
/set_my_currency RUB - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ü–µ–ª–µ–≤—É—é –≤–∞–ª—é—Ç—É
/set_local_currency BYN - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é (–∏—Å—Ö–æ–¥–Ω—É—é) –≤–∞–ª—é—Ç—É
"""

whatsup_message_text = "–•–æ—Ä–æ—à–æ! –ê —É –≤–∞—Å –∫–∞–∫?"
goodbye_message_text = "–î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á!"

dont_forward_commands = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã." " –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–ø–∞—Å–Ω–æ."

secret_message_for_admin = "–í–æ—Ç –≤–∞—à–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ —Å–ª–æ–≤–æ: ..."
secret_message_not_admin = "–í–∞–º —Å—é–¥–∞ –Ω–µ–ª—å–∑—è!"

user_info_doc_caption = "–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ —Ñ–∞–π–ª–µ"

great_cat = "–ö–∞–∫–æ–π –∫–ª–∞—Å—Å–Ω—ã–π –∫–æ—Ç!"

cvt_help_message = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä:"
cvt_jpy_to_rub_how_to = formatting.format_text(
    cvt_help_message,
    formatting.hcode("/jpy_to_rub 100"),
)

cvt_how_to = formatting.format_text(
    cvt_help_message,
    formatting.hcode("/cvt 100 JPY"),
)

invalid_argument_text = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç:"
error_fetching_currencies_text = "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
error_no_such_currency = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∞–ª—é—Ç–∞ {currency}, —É–∫–∞–∂–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é."


set_my_currency_help_message_text = formatting.format_text(
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—É—é –≤–∞–ª—é—Ç—É. –ù–∞–ø—Ä–∏–º–µ—Ä:",
    formatting.hcode("/set_my_currency RUB"),
)

set_my_currency_success_message_text = formatting.format_text(
    "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:",
    "{currency}",
)

set_local_currency_help_message = formatting.format_text(
    "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—É—é –≤–∞–ª—é—Ç—É, –Ω–∞–ø—Ä–∏–º–µ—Ä:",
    formatting.hcode("/set_local_currency RUB"),
)
set_local_currency_success_message = "–õ–æ–∫–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞ {currency} —É–∫–∞–∑–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!"

set_local_currency_only_in_private_chat = (
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ."
)

random_message_text = formatting.format_text(
    "–í–æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π —Å —Ä–∞–Ω–¥–æ–º–æ–º",
)

# survey

survey_cancel_suggestion = formatting.format_text(
    "",
    formatting.format_text(
        "–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å –º–æ–∂–Ω–æ –∫–æ–º–∞–Ω–¥–æ–π /cancel –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ",
        formatting.hcode("–æ—Ç–º–µ–Ω–∞"),
        separator=" ",
    ),
)

survey_message_welcome_what_is_your_full_name = formatting.format_text(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å.",
    "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤.",
    survey_cancel_suggestion,
)
survey_message_full_name_not_text = formatting.format_text(
    "–≠—Ç–æ –Ω–µ —Ç–µ–∫—Å—Ç, –∞ –º—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–∑–Ω–∞—Ç—å –≤–∞—à–µ –∏–º—è.",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –Ω–∞—Å—Ç–æ—è—â–µ–µ –∏–º—è.",
    survey_cancel_suggestion,
)
survey_message_full_name_ok_and_ask_for_email = formatting.format_text(
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {full_name}!",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à email.",
)
survey_message_email_not_ok = formatting.format_text(
    "–≠—Ç–æ –Ω–µ –Ω–∞—Å—Ç–æ—è—â–∏–π email",
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞–ª–∏–¥–Ω—ã–π.",
    survey_cancel_suggestion,
)
survey_message_email_ok = formatting.format_text(
    "–ü–æ—á—Ç—É –∑–∞–ø–∏—Å–∞–ª–∏, –º–æ–∂–Ω–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å –≤–∞—Å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É?",
)
survey_message_invalid_number = formatting.format_text(
    "–≠—Ç–æ –Ω–µ –≤–∞–ª–∏–¥–Ω–æ–µ —á–∏—Å–ª–æ. –£–∫–∞–∂–∏—Ç–µ —Ü–∏—Ñ—Ä–∞–º–∏."
)
survey_message_invalid_yes_or_no = formatting.format_text(
    "–ù–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –¥–∞ –∏–ª–∏ –Ω–µ—Ç."
)
survey_message_cancelled = formatting.format_text(
    "–û–ø—Ä–æ—Å –æ—Ç–º–µ–Ω—ë–Ω. –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ: /survey"
)


def format_message_content_currency_conversion(
    from_curr: str,
    to_curr: str,
    amount_str,
    result_amount_str,
):
    content = types.InputTextMessageContent(
        message_text=formatting.format_text(
            f"{formatting.hcode(amount_str)} {from_curr} –≤ {to_curr}:",
            formatting.hcode(result_amount_str),
        ),
        parse_mode="HTML",
    )
    return content


def format_content_to_result_article(
    from_currency: str,
    to_currency: str,
    amount,
    total_amount,
):
    from_curr = from_currency.upper()
    to_curr = to_currency.upper()
    amount_str = f"{amount:,}"
    result_amount_str = f"{total_amount:,.2f}"
    content = format_message_content_currency_conversion(
        from_curr=from_curr,
        to_curr=to_curr,
        amount_str=amount_str,
        result_amount_str=result_amount_str,
    )
    result = types.InlineQueryResultArticle(
        id=f"{from_currency}-{to_curr}-{amount}",
        title=f"{result_amount_str} {to_curr}",
        description=f"{amount_str} {from_curr} = {result_amount_str} {to_curr}",
        input_message_content=content,
    )
    return result


def prepare_default_result_article(query_id):
    content = types.InputTextMessageContent(
        message_text=formatting.format_text(
            formatting.hbold("–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ inline –∑–∞–ø—Ä–æ—Å–∞!"),
            f"id –∑–∞–ø—Ä–æ—Å–∞ inline: {formatting.hcode(query_id)}",
        ),
        parse_mode="HTML",
    )
    result = types.InlineQueryResultArticle(
        id="default-answer",
        title="Inline —Å–æ–æ–±—â–µ–Ω–∏–µ",
        description="–¢—É—Ç –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –∑–∞–ø—Ä–æ—Å–µ –∏ –æ—Ç–≤–µ—Ç–µ",
        input_message_content=content,
    )
    return result


def format_currency_convert_message(
    from_currency,
    to_currency,
    from_amount,
    to_amount,
):
    return formatting.format_text(
        formatting.hcode(f"{from_amount:,}"),
        f"{from_currency.upper()} —ç—Ç–æ –ø—Ä–∏–º–µ—Ä–Ω–æ",
        formatting.hcode(f"{to_amount:,.2f}"),
        to_currency.upper(),
        separator=" ",
    )


def format_jpy_to_rub_message(jpy_amount, rub_amount):
    return format_currency_convert_message(
        from_currency="JPY",
        to_currency="RUB",
        from_amount=jpy_amount,
        to_amount=rub_amount,
    )


markdown_text = r"""
*bold \*text*
_italic \_text_
__underline__
~strikethrough~
||spoiler||
*bold _italic bold ~italic bold strikethrough ||italic bold strikethrough spoiler||~ __underline italic bold___ bold*
[inline URL](http://www.example.com/)
[inline mention of a user](tg://user?id=1039918686)
![üëç](tg://emoji?id=5368324170671202286)
`inline fixed-width code`
```
pre-formatted fixed-width code block
```
```python
# pre-formatted fixed-width code block written in the Python programming language

@bot.message_handler(commands=["md"])
def send_markdown_message(message: types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text=messages.markdown_text,
        parse_mode="MarkdownV2",
    )
```
>Block quotation started
>Block quotation continued
>The last line of the block quotation

>The second block quotation started right after the previous

>The third block quotation started right after the previous
"""

html_text = """
<b>bold</b>, <strong>bold</strong>
<i>italic</i>, <em>italic</em>
<u>underline</u>, <ins>underline</ins>
<s>strikethrough</s>, <strike>strikethrough</strike>, <del>strikethrough</del>
<span class="tg-spoiler">spoiler</span>, <tg-spoiler>spoiler</tg-spoiler>
<b>bold <i>italic bold <s>italic bold strikethrough <span class="tg-spoiler">italic bold strikethrough spoiler</span></s> <u>underline italic bold</u></i> bold</b>
<a href="http://www.example.com/">inline URL</a>
<a href="tg://user?id=1039918686">inline mention of a user</a>
<tg-emoji emoji-id="5368324170671202286">üëç</tg-emoji>
<code>inline fixed-width code</code>
<pre>pre-formatted fixed-width code block</pre>
<pre><code class="language-python"># pre-formatted fixed-width code block written in the Python programming language

@bot.message_handler(commands=["html"])
def send_html_message(message: types.Message):
    bot.send_message(
        chat_id=message.chat.id,
        text=messages.html_text,
        parse_mode="HTML",
    )
</code></pre>
<blockquote>Block quotation started\nBlock quotation continued\nThe last line of the block quotation</blockquote>

<blockquote>Block quotation started
Block quotation continued
The last line of the block quotation
</blockquote>
"""
