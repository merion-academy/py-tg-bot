import textwrap
from typing import Sequence, Generator

from telebot import formatting
from todo_storage.types import ToDoList, ToDoItem

start_message = """
–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∑–∞–¥–∞—á.
–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É: /todo

–ü–æ–¥—Ä–æ–±–Ω–µ–µ: /help
"""

help_message = """
–Ø –ø–æ–º–æ–≥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∑–∞–¥–∞—á–∏.
/todo - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
/todo –∫—É–ø–∏—Ç—å —Ö–ª–µ–± - –±—ã—Å—Ç—Ä–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–¥–Ω—É –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫
/todos - —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/lists - —Å–ø–∏—Å–æ–∫ —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
/add_list - –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/rename_list - –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
/delete_list - —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
"""


class TodoDefaults:
    default_list_name = "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á"


DONE_FLAGS = ["‚ö™", "üî≥"]


please_text_or_cancel = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥–æ–π /cancel"
cancel_suggestion = formatting.format_text(
    "–û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π /cancel –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ ",
    formatting.hcode("–û—Ç–º–µ–Ω–∞"),
    separator=" ",
)


class TextTodo:
    btn_text_size_max = 10
    btn_text_collapse_placeholder = "..."

    are_you_sure_you_want_to_delete = "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?"
    deleted_success = "–ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞."

    oops_list_not_found = "–°–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."
    oops_todo_not_found = "–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É."

    please_dont_forward = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –ø–µ—Ä–µ—Å—ã–ª–∞–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã, —ç—Ç–æ –Ω–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ"
    choose_list = formatting.format_text(
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫ {list_name}.",
        "",
        "–ö–Ω–æ–ø–∫–æ–π –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Å–ø–∏—Å–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.",
    )
    chosen_todo_list = formatting.format_text(
        "–í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫ {list_name}.",
        "–ù–æ–≤—ã–µ –∑–∞–¥–∞—á–∏ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫.",
    )
    choose_list_try_again: str = formatting.format_text(
        "–ù–µ –ø–æ–Ω–∏–º–∞—é.",
        please_text_or_cancel,
        choose_list,
    )
    send_todo_text = "–ß—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á? (–æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–º)"
    added_to_default = "–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ {list_name}"
    cancelled_add = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ."
    selected_todo_list = "–í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫ {list_name!r}"

    oops = "–û–π..."
    invalid_state_on_select_todo_list = formatting.format_text(
        "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–±—Ä–∞—Ç—å —Å–ø–∏—Å–æ–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∫–æ–º–∞–Ω–¥–æ–π /todo",
    )

    @classmethod
    def todos_list_text(cls, todo_list: ToDoList) -> str:
        text_todos = (
            formatting.format_text(
                "-",
                DONE_FLAGS[todo.done],
                todo.title,
                separator=" ",
            )
            for todo in todo_list.items.values()
        )
        if not todo_list.items:
            text_todos = ("–ù–µ—Ç –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ",)

        return formatting.format_text(
            formatting.format_text(
                "–°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Å–ø–∏—Å–∫–µ",
                formatting.hbold(todo_list.name),
                separator=" ",
            ),
            "",
            *text_todos,
        )

    @classmethod
    def todo_item_button_toggle_text(cls, todo: ToDoItem):
        tog = DONE_FLAGS[todo.done]
        text = textwrap.shorten(
            todo.title,
            width=cls.btn_text_size_max,
            placeholder=cls.btn_text_collapse_placeholder,
        )
        if text == cls.btn_text_collapse_placeholder:
            end = cls.btn_text_size_max - len(cls.btn_text_collapse_placeholder)
            text = todo.title[:end] + cls.btn_text_collapse_placeholder

        return formatting.format_text(
            tog,
            text,
            separator=" ",
        )


class TextToDoLists:
    cancelled_create = "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ. –î–æ–±–∞–≤–∏—Ç—å: /add_list"
    choose_list_try_again: str = formatting.format_text(
        "–ù–µ –º–æ–≥—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.",
        please_text_or_cancel,
    )
    please_provide_new_list_name: str = formatting.format_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–ø–∏—Å–∫–∞. –ù–∞–ø—Ä–∏–º–µ—Ä:",
        formatting.hcode("/rename_list –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"),
    )
    done_rename_list: str = formatting.format_text(
        "–°–ø–∏—Å–æ–∫ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω.",
        "–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {list_name}",
    )
    delete_list_question: str = formatting.format_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ {list_name}?",
        "",
        cancel_suggestion,
    )
    delete_list_unexpected: str = formatting.format_text(
        "–ù–µ –º–æ–≥—É —Ä–∞–∑–æ–±—Ä–∞—Ç—å. –¢–æ—á–Ω–æ –ª–∏ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–ø–∏—Å–æ–∫ {list_name}?",
        "",
        cancel_suggestion,
    )
    delete_success_and_new_selected: str = formatting.format_text(
        "–°–ø–∏—Å–æ–∫ {prev_list_name} —É–¥–∞–ª—ë–Ω.",
        "–°–ø–∏—Å–æ–∫ {new_current_list_name} –≤—ã–±—Ä–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
    )
    delete_list_cancelled: str = formatting.format_text("–£–¥–∞–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    @classmethod
    def todo_lists_text_parts(
        cls,
        todo_lists: list[ToDoList],
    ) -> Sequence[str] | Generator[str, None, None]:
        if not todo_lists:
            return ("–ï—â—ë –Ω–µ—Ç —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á",)
        return (
            formatting.format_text(
                "-",
                formatting.hitalic(todo_list.name),
                separator=" ",
            )
            for todo_list in todo_lists
        )

    @classmethod
    def todo_lists_text(cls, todo_lists: list[ToDoList]) -> str:
        return formatting.format_text(
            "–í–∞—à–∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á:",
            "",
            *cls.todo_lists_text_parts(todo_lists),
        )

    @classmethod
    def selected_current_todo_list(cls, todo_list: ToDoList) -> str:
        return formatting.format_text(
            "–í—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫",
            todo_list.name,
            separator=" ",
        )

    @classmethod
    def add_todo_list_text(cls, todo_lists: list[ToDoList]) -> str:
        return formatting.format_text(
            "–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á.",
            "–í–∞—à–∏ —Å–ø–∏—Å–∫–∏:",
            "",
            *cls.todo_lists_text_parts(todo_lists),
        )

    @classmethod
    def todo_list_added_text(cls, todo_list: ToDoList) -> str:
        text: str = formatting.format_text(
            "–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á {list_name}.",
            "",
            "–ü—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        )
        return text.format(
            list_name=formatting.hbold(todo_list.name),
        )
